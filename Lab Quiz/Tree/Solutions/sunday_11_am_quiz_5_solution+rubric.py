# -*- coding: utf-8 -*-
"""Sunday_11 am_Quiz_5_Solution+Rubric.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1538IC4PCoXZ5SXoSxG7WgOD4kYxtmU_q
"""

class BTNode:
  def __init__(self, elem):
    self.elem = elem
    self.right = None
    self.left = None

"""SET-A:

Rubric:

1. Calculate left,right sub tree submission (2.5*2)
2. Use condition for level checking and calculate summation correctly for even odd levels (5)
3. For set A add the calculated summation of left sub tree and right sub tree
   of root,
  for set B multiple the calculated summation of left sub tree with right sub tree of root (5)

Rubric:

1. Calculate left,right sub tree submission (2.5*2)
2. Use condition for level checking and calculate summation correctly for even odd levels (5)
3. For set A add the calculated summation of left sub tree and right sub tree
   of root,
  for set B multiple the calculated summation of left sub tree with right sub tree of root (5)

SET-B:
"""

def calculateSum(node, level):
    if node is None:
        return 0
    sign = 1 if level % 2 == 0 else -1
    left_sum = calculateSum(node.left, level + 1)
    right_sum = calculateSum(node.right, level + 1)
    return sign * node.elem + left_sum + right_sum

def leftRightAddition(root):
    if root is None:
        return 0
    left_subtree_sum = calculateSum(root.left, 1)
    right_subtree_sum = calculateSum(root.right, 1)
    return left_subtree_sum + right_subtree_sum

def leftRightMultiplication(root):
  if root == None:
    return
  left = helper(root.left)
  right = helper(root.right)
  return left * right

def helper(root, M = 1):
  if root == None:
    return 0
  return helper(root.left, -1) + helper(root.right, -1) + root.elem * M

# Example usage:
# Constructing a binary tree
#        1
#      /   \
#     2     3
#    / \   / \
#   4   5 6   7
root = BTNode(1)
root.left = BTNode(2)
root.right = BTNode(3)
root.left.left = BTNode(4)
root.left.right = BTNode(5)
root.right.left = BTNode(6)
root.right.right = BTNode(7)

# Calculate the left-right addition
result = leftRightMultiplication(root)
print("Result of left-right multiplication:", result) # Result of the left-right multiplication: 70

