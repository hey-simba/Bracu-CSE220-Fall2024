# -*- coding: utf-8 -*-
"""Sunday_8 am_Quiz 5 Python Solution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sTXyAsjuzmDEsb94zT8XFBcP0mfCGHVR
"""

class BTNode:
  def __init__(self, elem):
    self.elem = elem
    self.right = None
    self.left = None

#Tree Construction
root = BTNode(30)
n1 = BTNode(10)
n2 = BTNode(40)
root.left=n1
root.right=n2
n3 = BTNode(3)
n4 = BTNode(15)
n1.left=n3
n1.right=n4
n5 = BTNode(35)
n6 = BTNode(55)
n2.left=n5
n2.right=n6
n7 = BTNode(2)
n3.left=n7
n8 = BTNode(36)
n5.right=n8

#SET A PYTHON
def find(root,value):
  if(root==None):
    return 0
  else:
    if(root.elem==value):
      return 0
    elif(root.elem>value ):
      return root.elem+find(root.left,value)
    elif(root.elem<value ):
      return root.elem+find(root.right,value)



find(root,15)

#SET B PYTHON
def route(root,dest):
  if(root==None):
    return None
  else:
    if(root.elem==dest):
      return
    elif(root.elem>dest and root.left!=None):
      print("Go left")
      route(root.left,dest)
    elif(root.elem<dest and root.right!=None):
      print("Go right")
      route(root.right,dest)
    else:
      print(dest," does not exist")

route(root,36)
route(root,60)

#Rubric
#2.5 Marks - Construct the Node class
#2.5 Marks - Construct the BST
#1 Marks - defining the function with correct parameters
#1.5 Marks - Right base condition
#3 Marks - Correct Recursive calls
#3 Marks - Correct Calculation (summation for set A and correct conditions for set B )
#1.5 Marks - Correct Output statements