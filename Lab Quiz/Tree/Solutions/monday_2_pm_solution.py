# -*- coding: utf-8 -*-
"""Monday_2 pm_Solution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jPEnRwZD__GKOc8Hth5lJjS2NpGIdJEr
"""

#SET A

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def mirror_node_sum(root):
    def helper(left, right):
        if left is None or right is None:  # If one of the nodes is missing, no mirror pair exists
            return 1
        return (
            left.value * right.value *  # Sum current mirror nodes
            helper(left.left, right.right) *  # Recur for outer mirrors
            helper(left.right, right.left)    # Recur for inner mirrors
        )

    if root is None:  # If the tree is empty
        return 0
    return helper(root.left, root.right)

# Example Binary Trees

# Example 1
root1 = Node(10)
root1.left = Node(6)
root1.right = Node(15)
root1.left.left = Node(3)
root1.left.right = Node(8)
root1.right.left = Node(12)
root1.right.right = Node(20)


#Example 2
root2 = Node(20)
root2.left = Node(15)
root2.right = Node(25)
root2.left.left = Node(10)
root2.left.right = Node(18)
root2.right.right = Node(30)
root2.left.left.left = Node(5)

print(mirror_node_sum(root1))
print(mirror_node_sum(root2))

#SET B

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def mirror_node_sum(root):
    def helper(left, right):
        if left is None or right is None:  # If one of the nodes is missing, no mirror pair exists
            return 0
        return (
            left.value + right.value +  # Sum current mirror nodes
            helper(left.left, right.right) +  # Recur for outer mirrors
            helper(left.right, right.left)    # Recur for inner mirrors
        )

    if root is None:  # If the tree is empty
        return 0
    return helper(root.left, root.right)

# Example Binary Trees

# Example 1
root1 = Node(10)
root1.left = Node(6)
root1.right = Node(15)
root1.left.left = Node(3)
root1.left.right = Node(8)
root1.right.left = Node(12)
root1.right.right = Node(20)




#Example 2
root2 = Node(20)
root2.left = Node(15)
root2.right = Node(25)
root2.left.left = Node(10)
root2.left.right = Node(18)
root2.right.right = Node(30)
root2.left.left.left = Node(5)

print(mirror_node_sum(root1))
print(mirror_node_sum(root2))

