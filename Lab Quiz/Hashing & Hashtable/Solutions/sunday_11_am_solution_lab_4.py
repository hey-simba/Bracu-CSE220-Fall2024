# -*- coding: utf-8 -*-
"""Sunday_11 am_Solution_Lab_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aEd78HsDC4Nfn5sUos3C4YBBRiq9AOI5
"""

class Node:
    """A class for a node in the linked list used for chaining."""
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None


class HashTable:
    """A class to implement the hash table with chaining for collision handling."""
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def hash_function(self, key):
        """Calculate hash index based on the sum of ASCII values of the first two characters."""
        first_char = ord(key[0]) if len(key) > 0 else 0
        second_char = ord(key[1]) if len(key) > 1 else ord('Z')  # Default to 'Y' if only one character
        return (first_char + second_char) % self.size

    def insert(self, key, value):
        """Insert a key-value pair or update the value if the key already exists."""
        index = self.hash_function(key)
        # If the bucket at the index is empty, insert a new node
        if self.table[index] is None:
            self.table[index] = Node(key, value)
        else:
            # Traverse the linked list to find if the key exists
            current = self.table[index]
            while current:
                if current.key == key:
                    current.value = value  # Update the value if key exists
                    return
                if current.next is None:  # If end of the chain, insert a new node
                    break
                current = current.next
            current.next = Node(key, value)

    def display(self):
        """Display the hash table."""
        for i in range(self.size):
            print(f"Index {i}:", end=" ")
            current = self.table[i]
            while current:
                print(f"{current.key} ({current.value})", end=" -> ")
                current = current.next
            print("None")


# Sample Input
ht = HashTable(7)

ht.insert("S1", 85)
ht.insert("A", 90)
ht.insert("S2", 78)

print("\nHash table after insertions:")
ht.display()

ht.insert("S1", 88)  # Updating S1 grade

print("\nHash table after update:")
ht.display()